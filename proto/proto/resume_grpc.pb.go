// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: resume.proto

package resumeadvisor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResumeService_GetFeedback_FullMethodName         = "/resumeadvisor.ResumeService/GetFeedback"
	ResumeService_GetDetailedFeedback_FullMethodName = "/resumeadvisor.ResumeService/GetDetailedFeedback"
)

// ResumeServiceClient is the client API for ResumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResumeServiceClient interface {
	GetFeedback(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeFeedback, error)
	GetDetailedFeedback(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResumeFeedback], error)
}

type resumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResumeServiceClient(cc grpc.ClientConnInterface) ResumeServiceClient {
	return &resumeServiceClient{cc}
}

func (c *resumeServiceClient) GetFeedback(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeFeedback, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeFeedback)
	err := c.cc.Invoke(ctx, ResumeService_GetFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) GetDetailedFeedback(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResumeFeedback], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResumeService_ServiceDesc.Streams[0], ResumeService_GetDetailedFeedback_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResumeRequest, ResumeFeedback]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResumeService_GetDetailedFeedbackClient = grpc.ServerStreamingClient[ResumeFeedback]

// ResumeServiceServer is the server API for ResumeService service.
// All implementations must embed UnimplementedResumeServiceServer
// for forward compatibility.
type ResumeServiceServer interface {
	GetFeedback(context.Context, *ResumeRequest) (*ResumeFeedback, error)
	GetDetailedFeedback(*ResumeRequest, grpc.ServerStreamingServer[ResumeFeedback]) error
	mustEmbedUnimplementedResumeServiceServer()
}

// UnimplementedResumeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResumeServiceServer struct{}

func (UnimplementedResumeServiceServer) GetFeedback(context.Context, *ResumeRequest) (*ResumeFeedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedback not implemented")
}
func (UnimplementedResumeServiceServer) GetDetailedFeedback(*ResumeRequest, grpc.ServerStreamingServer[ResumeFeedback]) error {
	return status.Errorf(codes.Unimplemented, "method GetDetailedFeedback not implemented")
}
func (UnimplementedResumeServiceServer) mustEmbedUnimplementedResumeServiceServer() {}
func (UnimplementedResumeServiceServer) testEmbeddedByValue()                       {}

// UnsafeResumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResumeServiceServer will
// result in compilation errors.
type UnsafeResumeServiceServer interface {
	mustEmbedUnimplementedResumeServiceServer()
}

func RegisterResumeServiceServer(s grpc.ServiceRegistrar, srv ResumeServiceServer) {
	// If the following call pancis, it indicates UnimplementedResumeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResumeService_ServiceDesc, srv)
}

func _ResumeService_GetFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).GetFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_GetFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).GetFeedback(ctx, req.(*ResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_GetDetailedFeedback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResumeServiceServer).GetDetailedFeedback(m, &grpc.GenericServerStream[ResumeRequest, ResumeFeedback]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResumeService_GetDetailedFeedbackServer = grpc.ServerStreamingServer[ResumeFeedback]

// ResumeService_ServiceDesc is the grpc.ServiceDesc for ResumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resumeadvisor.ResumeService",
	HandlerType: (*ResumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeedback",
			Handler:    _ResumeService_GetFeedback_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDetailedFeedback",
			Handler:       _ResumeService_GetDetailedFeedback_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "resume.proto",
}
